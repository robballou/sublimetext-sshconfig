# SYNTAX TEST partial-symbols "Packages/SSH Config/SSHD Config.sublime-syntax"

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

Port 22
# ^^    keyword.other
#    ^^ constant.numeric
AddressFamily any
# ^^^^^^^^^^^     keyword.other
#             ^^^ constant.language.set
ListenAddress 0.0.0.0
# ^^^^^^^^^^^         keyword.other
#             ^^^^^^^ constant.numeric.ip-address.v4
ListenAddress ::
# ^^^^^^^^^^^    keyword.other
#             ^^ constant.numeric.ip-address.v6

#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key
#@@@@@@@ local-definition

# Ciphers and keying
#RekeyLimit default none
#@@@@@@@@@@ local-definition

# Logging
#SyslogFacility AUTH
#LogLevel DEBUG
#@@@@@@@@ local-definition

# Authentication:

LoginGraceTime 2m
#^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#              ^^ meta.mapping.value.ssh.common meta.constant.time.ssh.common meta.number.integer.decimal.ssh.common
#              ^ constant.numeric.value.ssh.common
#               ^ constant.numeric.suffix.ssh.common
LoginGraceTime 1h30m
#^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#              ^^^^^ meta.mapping.value.ssh.common meta.constant.time.ssh.common meta.number.integer.decimal.ssh.common
#              ^ constant.numeric.value.ssh.common
#               ^ constant.numeric.suffix.ssh.common
#                ^^ constant.numeric.value.ssh.common
#                  ^ constant.numeric.suffix.ssh.common
#PermitRootLogin prohibit-password
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

PubkeyAuthentication yes
#^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                    ^^^ meta.mapping.value.ssh.common constant.language.boolean.true.ssh.common

# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile  .ssh/authorized_keys
#^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                   ^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.ssh.common meta.path.ssh.common entity.name.ssh.common
#                       ^ punctuation.separator.path.ssh.common
##                   ^ - punctuation

AuthorizedPrincipalsFile none
#^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                        ^^^^ meta.mapping.value.ssh.common constant.language.null.ssh.common

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
HostbasedAuthentication no
#^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                       ^^ meta.mapping.value.ssh.common constant.language.boolean.false.ssh.common

# To disable tunneled clear text passwords, change to `no` here!
PasswordAuthentication no
#PermitEmptyPasswords no

AllowAgentForwarding no
#AllowTcpForwarding yes
#GatewayPorts no
#X11Forwarding no
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
#PrintMotd yes
#PrintLastLog yes
#TCPKeepAlive yes
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 0
#ClientAliveCountMax 3
#UseDNS no
PidFile /var/run/sshd.pid
#^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#       ^^^^^^^^^^^^^^^^^ meta.mapping.value.ssh.common meta.path.ssh.common entity.name.ssh.common
#       ^ punctuation.separator.path.ssh.common
#           ^ punctuation.separator.path.ssh.common
#               ^ punctuation.separator.path.ssh.common
#                    ^ punctuation.separator.sequence.ssh.common
MaxStartups 10:30:100
#^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#           ^^^^^^^^^ meta.mapping.value.ssh.common
#           ^^ constant.numeric.sshd_config
#             ^ punctuation.separator.sequence.sshd_config
#              ^^ constant.numeric.sshd_config
#                ^ punctuation.separator.sequence.sshd_config
#                 ^^^ constant.numeric.sshd_config
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# pass locale information
AcceptEnv LANG LC_*
#^^^^^^^^ meta.mapping.key keyword.other
#         ^^^^^^^^^ meta.mapping.value string.unquoted
#                 ^ constant.other.wildcard.asterisk.ssh.common

# no default banner path
#Banner none

# override default of no subsystems
 Subsystem   sftp    /usr/libexec/sftp-server
#^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.ssh.common string.unquoted.ssh.common
#                    ^^^^^^^^^^^^^^^^^^^^^^^^ meta.path.ssh.common entity.name.ssh.common
#                    ^ punctuation.separator.path.ssh.common
#                        ^ punctuation.separator.path.ssh.common
#                                ^ punctuation.separator.path.ssh.common
#@@@@@@@@@ local-definition

# Example of overriding settings on a per-user basis
# Match User anoncvs
# @@@@@ local-definition
#   X11Forwarding no
#   @@@@@@@@@@@@@ local-definition
#   AllowTcpForwarding no
#   @@@@@@@@@@@@@@@@@@ local-definition
#   PermitTTY no
#   @@@@@@@@@ local-definition
#   ForceCommand cvs server
#   @@@@@@@@@@@@ local-definition

## https://stackoverflow.com/a/36072674
# All users except username1 and username2 default to sftp
Match User *,!username1,!usern.ame2 Host foo.example.com
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config - meta.block meta.block
#^^^^ keyword.control.conditional.sshd_config
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.conditional.sshd_config
#     ^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#         ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config
#          ^ string.unquoted.ssh.common constant.other.wildcard.asterisk.ssh.common
#           ^ punctuation.separator.sequence.ssh.common
#            ^ keyword.operator.logical.ssh.common
#             ^^^^^^^^^ string.unquoted.ssh.common
#                      ^ punctuation.separator.sequence.ssh.common
#                       ^ keyword.operator.logical.ssh.common
#                        ^^^^^^^^^^ string.unquoted.ssh.common - punctuation
#                                   ^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                                       ^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config
#                                        ^^^^^^^^^^^^^^^ string.unquoted.ssh.common
#                                           ^ punctuation.separator.sequence.ssh.common
#                                                   ^ punctuation.separator.sequence.ssh.common
    PasswordAuthentication yes
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match - meta.statement.conditional - meta.block meta.block
#   @@@@@@@@@@@@@@@@@@@@@@ local-definition
    #^^^^^^^^^^^^^^^^^^^^^ meta.block.match meta.mapping.key keyword.other
    #                      ^^^ constant.language.boolean
    PasswordAuthentication foo
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match - meta.statement.conditional - meta.block meta.block
#   @@@@@@@@@@@@@@@@@@@@@@ local-definition
    #^^^^^^^^^^^^^^^^^^^^^ meta.block.match meta.mapping.key keyword.other
    #                      ^^^ invalid.illegal
    AllowTCPForwarding no
    X11Forwarding "no"
#^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config
#   ^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                 ^^^^ meta.mapping.value.ssh.common string.quoted.double.ssh.common
#                 ^ punctuation.definition.string.begin.ssh.common
#                  ^^ constant.language.boolean.false.ssh.common
#                    ^ punctuation.definition.string.end.ssh.common
    ForceCommand internal-sftp -f LOCAL0 -l INFO
    #^^^^^^^^^^^ meta.mapping.key keyword.other
    #            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value source.shell
    #            ^^^^^^^^^^^^^ meta.function-call variable.function.shell
    #                                           ^ - source.shell

# Comment
# <- comment.line.number-sign.sshd_config punctuation.definition.comment.sshd_config
#^^^^^^^^ comment.line.number-sign.sshd_config
#@@@@@@@@@@@@@ none

    # Comment
#^^^ - comment
#   ^^^^^^^^^ comment.line.number-sign.sshd_config
#   ^ punctuation.definition.comment.sshd_config
#@@@@@@@@@@@@@ none

; Comment
# <- comment.line.semi-colon.sshd_config punctuation.definition.comment.sshd_config
#^^^^^^^^ comment.line.semi-colon.sshd_config
#@@@@@@@@@@@@@ none

    ; Comment
#^^^ - comment
#   ^^^^^^^^^ comment.line.semi-colon.sshd_config
#   ^ punctuation.definition.comment.sshd_config
#@@@@@@@@@@@@@ none

    AuthorizedKeysCommand echo %% %a %b %c %d %e %f %g %h %i %j %k %l %m %n %o %p %q %r %s %t %u %v %w %x %y %z
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config
#   ^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config source.shell.embedded.ssh.authorizedkeyscommand source.shell
#                         ^^^^ support.function.shell
#                              ^^ constant.character.escape.ssh
#                                ^^^^^^^^^^^^^^^^ - constant
#                                                ^^ constant.other.placeholder.ssh
#                                                  ^^^^ - constant
#                                                      ^^ constant.other.placeholder.ssh
#                                                        ^^^^^^^ - constant
#                                                               ^^ constant.other.placeholder.ssh
#                                                                 ^^^^^^^^^^^^^^^^^^^^^^ - constant
#                                                                                       ^^ constant.other.placeholder.ssh
#                                                                                          ^^ constant.other.placeholder.ssh
#                                                                                             ^^ constant.other.placeholder.ssh
#                                                                                               ^^^^^^^^^^^^^^^ - constant
    AuthorizedKeysCommand echo %% %A %B %C %D %E %F %G %H %I %J %K %L %M %N %O %P %Q %R %S %T %U %V %W %X %Y %Z
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config
#   ^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config source.shell.embedded.ssh.authorizedkeyscommand source.shell
#                         ^^^^ support.function.shell
#                              ^^ constant.character.escape.ssh
#                                ^^^^^^^ - constant
#                                       ^^ constant.other.placeholder.ssh
#                                          ^^ constant.other.placeholder.ssh
#                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ - constant
#                                                                                             ^^ constant.other.placeholder.ssh
#                                                                                               ^^^^^^^^^^^^^^^ - constant
    AuthorizedKeysCommand "echo %% %a %b %c %d %e %f %g %h %i %j %k %l %m %n %o %p %q %r %s %t %u %v %w %x %y %z"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config
#   ^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config
#                         ^ string.quoted.double.sshd_config punctuation.definition.string.begin.sshd_config
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.double.ssh_config source.shell.embedded.ssh.authorizedkeyscommand source.shell
#                          ^^^^ support.function.shell
#                               ^^ constant.character.escape.ssh
#                                 ^^^^^^^^^^^^^^^^ - constant
#                                                 ^^ constant.other.placeholder.ssh
#                                                   ^^^^ - constant
#                                                       ^^ constant.other.placeholder.ssh
#                                                         ^^^^^^^ - constant
#                                                                ^^ constant.other.placeholder.ssh
#                                                                  ^^^^^^^^^^^^^^^^^^^^^^ - constant
#                                                                                        ^^ constant.other.placeholder.ssh
#                                                                                           ^^ constant.other.placeholder.ssh
#                                                                                              ^^ constant.other.placeholder.ssh
#                                                                                                ^^^^^^^^^^^^^^^ - constant
#                                                                                                               ^ meta.mapping.value.sshd_config string.quoted.double.sshd_config punctuation.definition.string.end.sshd_config
    AuthorizedKeysCommand "echo %% %A %B %C %D %E %F %G %H %I %J %K %L %M %N %O %P %Q %R %S %T %U %V %W %X %Y %Z"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config
#   ^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config
#                         ^ string.quoted.double.sshd_config punctuation.definition.string.begin.sshd_config
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.double.ssh_config source.shell.embedded.ssh.authorizedkeyscommand source.shell
#                          ^^^^ support.function.shell
#                               ^^ constant.character.escape.ssh
#                                 ^^^^^^^ - constant
#                                        ^^ constant.other.placeholder.ssh
#                                           ^^ constant.other.placeholder.ssh
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ - constant
#                                                                                              ^^ constant.other.placeholder.ssh
#                                                                                                ^^^^^^^^^^^^^^^ - constant
#                                                                                                               ^ meta.mapping.value.sshd_config string.quoted.double.sshd_config punctuation.definition.string.end.sshd_config
    AuthorizedPrincipalsCommand echo %% %a %b %c %d %e %f %g %h %i %j %k %l %m %n %o %p %q %r %s %t %u %v %w %x %y %z
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config source.shell.embedded.ssh.authorizedprincipalscommand source.shell
#                               ^^^^ support.function.shell
#                                    ^^ constant.character.escape.ssh
#                                      ^^^^^^^^^^^^^^^^ - constant
#                                                      ^^ constant.other.placeholder.ssh
#                                                        ^^^^ - constant
#                                                            ^^ constant.other.placeholder.ssh
#                                                               ^^ constant.other.placeholder.ssh
#                                                                 ^^^^ - constant
#                                                                     ^^ constant.other.placeholder.ssh
#                                                                       ^^^^^^^^^^^^^^^^^^^^^^ - constant
#                                                                                             ^^ constant.other.placeholder.ssh
#                                                                                                ^^ constant.other.placeholder.ssh
#                                                                                                   ^^ constant.other.placeholder.ssh
#                                                                                                     ^^^^^^^^^^^^^^^ - constant
    AuthorizedPrincipalsCommand echo %% %A %B %C %D %E %F %G %H %I %J %K %L %M %N %O %P %Q %R %S %T %U %V %W %X %Y %Z
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config source.shell.embedded.ssh.authorizedprincipalscommand source.shell
#                               ^^^^ support.function.shell
#                                    ^^ constant.character.escape.ssh
#                                      ^^^^^^^ - constant
#                                             ^^ constant.other.placeholder.ssh
#                                                ^^ constant.other.placeholder.ssh
#                                                  ^^^^ - constant
#                                                      ^^ constant.other.placeholder.ssh
#                                                        ^^^^^^^^^^^^^ - constant
#                                                                     ^^ constant.other.placeholder.ssh
#                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ - constant
#                                                                                                ^^ constant.other.placeholder.ssh
#                                                                                                   ^^ constant.other.placeholder.ssh
#                                                                                                     ^^^^^^^^^^^^^^^ - constant
    AuthorizedPrincipalsCommand "echo %% %a %b %c %d %e %f %g %h %i %j %k %l %m %n %o %p %q %r %s %t %u %v %w %x %y %z"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config
#                               ^ string.quoted.double.sshd_config punctuation.definition.string.begin.sshd_config
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.double.ssh_config source.shell.embedded.ssh.authorizedprincipalscommand source.shell
#                                ^^^^ support.function.shell
#                                     ^^ constant.character.escape.ssh
#                                       ^^^^^^^^^^^^^^^^ - constant
#                                                       ^^ constant.other.placeholder.ssh
#                                                         ^^^^ - constant
#                                                             ^^ constant.other.placeholder.ssh
#                                                                ^^ constant.other.placeholder.ssh
#                                                                  ^^^^ - constant
#                                                                      ^^ constant.other.placeholder.ssh
#                                                                        ^^^^^^^^^^^^^^^^^^^^^^ - constant
#                                                                                              ^^ constant.other.placeholder.ssh
#                                                                                                 ^^ constant.other.placeholder.ssh
#                                                                                                    ^^ constant.other.placeholder.ssh
#                                                                                                      ^^^^^^^^^^^^^^^ - constant
#                                                                                                                     ^ meta.mapping.value.sshd_config string.quoted.double.sshd_config punctuation.definition.string.end.sshd_config
    AuthorizedPrincipalsCommand "echo %% %A %B %C %D %E %F %G %H %I %J %K %L %M %N %O %P %Q %R %S %T %U %V %W %X %Y %Z"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config
#                               ^ string.quoted.double.sshd_config punctuation.definition.string.begin.sshd_config
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.double.ssh_config source.shell.embedded.ssh.authorizedprincipalscommand source.shell
#                                ^^^^ support.function.shell
#                                     ^^ constant.character.escape.ssh
#                                       ^^^^^^^ - constant
#                                              ^^ constant.other.placeholder.ssh
#                                                 ^^ constant.other.placeholder.ssh
#                                                   ^^^^ - constant
#                                                       ^^ constant.other.placeholder.ssh
#                                                         ^^^^^^^^^^^^^ - constant
#                                                                      ^^ constant.other.placeholder.ssh
#                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ - constant
#                                                                                                 ^^ constant.other.placeholder.ssh
#                                                                                                    ^^ constant.other.placeholder.ssh
#                                                                                                      ^^^^^^^^^^^^^^^ - constant
#                                                                                                                     ^ meta.mapping.value.sshd_config string.quoted.double.sshd_config punctuation.definition.string.end.sshd_config


# Normal ssh allowed for users username1 and username2 from the local network
Match User username1,username2 Address 192.168.0.0/16
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match - meta.block meta.block
#^^^^ keyword.control.conditional
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.conditional
#     ^^^^ keyword.other
#          ^^^^^^^^^ string.unquoted
#                   ^ punctuation.separator.sequence
#                    ^^^^^^^^^ string.unquoted
#                             ^ - string
#                              ^^^^^^^ keyword.other - keyword keyword
#                                      ^^^^^^^^^^^ constant.numeric.ip-address.v4
#                                                 ^ punctuation.separator.sequence
#                                                  ^^ constant.other.range
    PasswordAuthentication yes
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match - meta.statement - meta.block meta.block

# Users username1 and username2 not allowed from other networks
Match User username1,username2 Address *,!192.168.0.0/16 All
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match - meta.block meta.block
#^^^^ keyword.control.conditional
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.conditional
#     ^^^^ keyword.other
#          ^^^^^^^^^ string.unquoted
#                   ^ punctuation.separator.sequence
#                    ^^^^^^^^^ string.unquoted
#                             ^ - string
#                              ^^^^^^^ keyword.other - keyword keyword
#                                      ^ constant.other.wildcard.asterisk.ssh.common
#                                       ^ punctuation.separator.sequence
#                                        ^ keyword.operator.logical
#                                         ^^^^^^^^^^^ constant.numeric.ip-address.v4
#                                                    ^ punctuation.separator.sequence
#                                                     ^^ constant.other.range
#                                                        ^^^ constant.language.boolean.true.ssh.common
    PasswordAuthentication yes
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match - meta.statement.conditional - meta.block meta.block
    AllowTCPForwarding no
    X11Forwarding no
    ForceCommand /usr/sbin/nologin
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.match.sshd_config
#   ^^^^^^^^^^^^ meta.mapping.key.sshd_config keyword.other.sshd_config
#                ^^^^^^^^^^^^^^^^^ meta.mapping.value.sshd_config source.shell meta.function-call.identifier.shell meta.command.shell variable.function.shell
