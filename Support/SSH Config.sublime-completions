{
    "scope": "source.ssh_config - meta.statement - meta.mapping.value - comment",
    "completions": [
        {
            "trigger": "Host",
            "contents": "Host",
            "kind": "keyword",
            "details": "Define rules for a host"
        },
        {
            "trigger": "Match",
            "contents": "Match",
            "kind": "keyword",
            "details": "Define rules with multiple conditions"
        },
        {
            "trigger": "AddKeysToAgent",
            "contents": "AddKeysToAgent",
            "kind": "keyword",
            "details": "Add keys to a running <code>ssh-agent</code>"
        },
        {
            "trigger": "addkeystoagent",
            "contents": "AddKeysToAgent ${0:{ yes | no | confirm | ask \\}}",
            "kind": "snippet",
            "details": "Add keys to a running <code>ssh-agent</code>"
        },
        {
            "trigger": "AddressFamily",
            "contents": "AddressFamily",
            "kind": "keyword",
            "details": "IPv4/IPv6 switch"
        },
        {
            "trigger": "addressfamily",
            "contents": "AddressFamily ${0:{ inet4 | inet6 | any \\}}",
            "kind": "snippet",
            "details": "IPv4/IPv6 switch"
        },
        {
            "trigger": "BatchMode",
            "contents": "BatchMode",
            "kind": "keyword",
            "details": "Disable UI prompts"
        },
        {
            "trigger": "batchmode",
            "contents": "BatchMode ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Disable UI prompts"
        },
        {
            "trigger": "BindAddress",
            "contents": "BindAddress",
            "kind": "keyword",
            "details": "Specify source NIC"
        },
        {
            "trigger": "bindaddress",
            "contents": "BindAddress ${0:192.0.2.16}",
            "kind": "snippet",
            "details": "Specify source NIC"
        },
        {
            "trigger": "CanonicalDomains",
            "contents": "CanonicalDomains",
            "kind": "keyword",
            "details": "List of domain suffixes"
        },
        {
            "trigger": "canonicaldomains",
            "contents": "CanonicalDomains ${0:local.example.com,local.example.org}",
            "kind": "snippet",
            "details": "List of domain suffixes"
        },
        {
            "trigger": "CanonicalizeFallbackLocal",
            "contents": "CanonicalizeFallbackLocal",
            "kind": "keyword",
            "details": "Fallback for domain lookup failure"
        },
        {
            "trigger": "canonicalizefallbacklocal",
            "contents": "CanonicalizeFallbackLocal ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Fallback for domain lookup failure"
        },
        {
            "trigger": "CanonicalizeHostname",
            "contents": "CanonicalizeHostname",
            "kind": "keyword",
            "details": "Enable explicit hostname lookups"
        },
        {
            "trigger": "canonicalizehostname",
            "contents": "CanonicalizeHostname ${0:{ yes | no | always \\}}",
            "kind": "snippet",
            "details": "Enable explicit hostname lookups"
        },
        {
            "trigger": "CanonicalizeMaxDots",
            "contents": "CanonicalizeMaxDots",
            "kind": "keyword",
            "details": "Number of <code>.</code>s to disable domain lookup"
        },
        {
            "trigger": "canonicalizemaxdots",
            "contents": "CanonicalizeMaxDots ${0:1}",
            "kind": "snippet",
            "details": "Number of <code>.</code>s to disable domain lookup"
        },
        {
            "trigger": "CanonicalizePermittedCNAMEs",
            "contents": "CanonicalizePermittedCNAMEs",
            "kind": "keyword",
            "details": "Map of whitelisted CNAMEs to follow on lookup"
        },
        {
            "trigger": "canonicalizepermittedcnames",
            "contents": "CanonicalizePermittedCNAMEs ${0:*.source.com,source.org:dest.org,*.local.dest.com}",
            "kind": "snippet",
            "details": "Map of whitelisted CNAMEs to follow on lookup"
        },
        {
            "trigger": "CASignatureAlgorithms",
            "contents": "CASignatureAlgorithms",
            "kind": "keyword",
            "details": "Permitted algms for CAs"
        },
        {
            "trigger": "casignaturealgorithms",
            "contents": "CASignatureAlgorithms ${0:ssh-ed25519,rsa-sha2-512}",
            "kind": "snippet",
            "details": "Permitted algms for CAs"
        },
        {
            "trigger": "CertificateFile",
            "contents": "CertificateFile",
            "kind": "keyword",
            "details": "Path to user certificate"
        },
        {
            "trigger": "certificatefile",
            "contents": "CertificateFile ${0:~/.ssh/pem_%h}",
            "kind": "snippet",
            "details": "Path to user certificate"
        },
        {
            "trigger": "ChallengeResponseAuthentication",
            "contents": "ChallengeResponseAuthentication",
            "kind": "keyword",
            "details": "Disable challenge-response auth"
        },
        {
            "trigger": "challengeresponseauthentication",
            "contents": "ChallengeResponseAuthentication ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Disable challenge-response auth"
        },
        {
            "trigger": "CheckHostIP",
            "contents": "CheckHostIP",
            "kind": "keyword",
            "details": "Disable comparing IP to <code>known_hosts</code>"
        },
        {
            "trigger": "checkhostip",
            "contents": "CheckHostIP ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Disable comparing IP to <code>known_hosts</code>"
        },
        {
            "trigger": "Ciphers",
            "contents": "Ciphers",
            "kind": "keyword",
            "details": "Permitted cipher patterns, by preference"
        },
        {
            "trigger": "ciphers",
            "contents": "Ciphers ${0:{ ^prepend,to,list | +append,to,list | -remove,from,list | replace,list \\}}",
            "kind": "snippet",
            "details": "Permitted cipher patterns, by preference"
        },
        {
            "trigger": "ClearAllForwardings",
            "contents": "ClearAllForwardings",
            "kind": "keyword",
            "details": "Clear port forwarding"
        },
        {
            "trigger": "clearallforwardings",
            "contents": "ClearAllForwardings ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Clear port forwarding"
        },
        {
            "trigger": "Compression",
            "contents": "Compression",
            "kind": "keyword",
            "details": "Disable compression"
        },
        {
            "trigger": "compression",
            "contents": "Compression ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Disable compression"
        },
        {
            "trigger": "ConnectionAttempts",
            "contents": "ConnectionAttempts",
            "kind": "keyword",
            "details": "Set retry for intermittent connections"
        },
        {
            "trigger": "connectionattempts",
            "contents": "ConnectionAttempts ${0:1}",
            "kind": "snippet",
            "details": "Set retry for intermittent connections"
        },
        {
            "trigger": "ConnectTimeout",
            "contents": "ConnectTimeout",
            "kind": "keyword",
            "details": "Timeout in seconds"
        },
        {
            "trigger": "connecttimeout",
            "contents": "ConnectTimeout ${0:5}",
            "kind": "snippet",
            "details": "Timeout in seconds"
        },
        {
            "trigger": "ControlMaster",
            "contents": "ControlMaster",
            "kind": "keyword",
            "details": "Set connection sharing for multiple sessions on <code>ControlPath</code>"
        },
        {
            "trigger": "controlmaster",
            "contents": "ControlMaster ${0:{ yes | no | ask \\}}",
            "kind": "snippet",
            "details": "Set connection sharing for multiple sessions on <code>ControlPath</code>"
        },
        {
            "trigger": "ControlPath",
            "contents": "ControlPath",
            "kind": "keyword",
            "details": "Tokenized path to connection sharing file"
        },
        {
            "trigger": "controlpath",
            "contents": "ControlPath ${0:~/.ssh/control-%h-%p-%r}",
            "kind": "snippet",
            "details": "Tokenized path to connection sharing file"
        },
        {
            "trigger": "ControlPersist",
            "contents": "ControlPersist",
            "kind": "keyword",
            "details": "Keep connection on disconnect of sessions"
        },
        {
            "trigger": "controlpersist",
            "contents": "ControlPersist ${0:{ yes | no | 300 (seconds to timeout) \\}}",
            "kind": "snippet",
            "details": "Keep connection on disconnect of sessions"
        },
        {
            "trigger": "DynamicForward",
            "contents": "DynamicForward",
            "kind": "keyword",
            "details": "Dynamic SSH or SOCKS port forwarding"
        },
        {
            "trigger": "dynamicforward",
            "contents": "DynamicForward ${0:[address:]port}",
            "kind": "snippet",
            "details": "Dynamic SSH or SOCKS port forwarding"
        },
        {
            "trigger": "EnableSSHKeysign",
            "contents": "EnableSSHKeysign",
            "kind": "keyword",
            "details": "Enable <code>ssh-keysign</code> for <code>HostbasedAuthentication</code>"
        },
        {
            "trigger": "enablesshkeysign",
            "contents": "EnableSSHKeysign ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Enable <code>ssh-keysign</code> for <code>HostbasedAuthentication</code>"
        },
        {
            "trigger": "EscapeChar",
            "contents": "EscapeChar",
            "kind": "keyword",
            "details": "Default <code>~</code>"
        },
        {
            "trigger": "escapechar",
            "contents": "EscapeChar ${0:{ ^E | none \\}}",
            "kind": "snippet",
            "details": "Default <code>~</code>"
        },
        {
            "trigger": "ExitOnForwardFailure",
            "contents": "ExitOnForwardFailure",
            "kind": "keyword",
            "details": "Enable termination if port forwarding fails"
        },
        {
            "trigger": "exitonforwardfailure",
            "contents": "ExitOnForwardFailure ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Enable termination if port forwarding fails"
        },
        {
            "trigger": "FingerprintHash",
            "contents": "FingerprintHash",
            "kind": "keyword",
            "details": "Key hash algorithm"
        },
        {
            "trigger": "fingerprinthash",
            "contents": "FingerprintHash ${0:{ sha256 | md5 \\}}",
            "kind": "snippet",
            "details": "Key hash algorithm"
        },
        {
            "trigger": "ForwardAgent",
            "contents": "ForwardAgent",
            "kind": "keyword",
            "details": "Enable forwarding ssh-agent keys to outbound ssh"
        },
        {
            "trigger": "forwardagent",
            "contents": "ForwardAgent ${0:{ yes | no | ~/path/to/socket | \\$PATH_VAR \\}}",
            "kind": "snippet",
            "details": "Enable forwarding ssh-agent keys to outbound ssh"
        },
        {
            "trigger": "ForwardX11",
            "contents": "ForwardX11",
            "kind": "keyword",
            "details": "Enable X11 forwarding"
        },
        {
            "trigger": "forwardx11",
            "contents": "ForwardX11 ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Enable X11 forwarding"
        },
        {
            "trigger": "ForwardX11Timeout",
            "contents": "ForwardX11Timeout",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "forwardx11timeout",
            "contents": "ForwardX11Timeout ${0:2h}",
            "kind": "snippet",
            "details": ""
        },
        {
            "trigger": "ForwardX11Trusted",
            "contents": "ForwardX11Trusted",
            "kind": "keyword",
            "details": "Consider the remote X11 to be \"trusted\""
        },
        {
            "trigger": "forwardx11trusted",
            "contents": "ForwardX11Trusted ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Consider the remote X11 to be \"trusted\""
        },
        {
            "trigger": "GatewayPorts",
            "contents": "GatewayPorts",
            "kind": "keyword",
            "details": "Present local port forwards to remote host"
        },
        {
            "trigger": "gatewayports",
            "contents": "GatewayPorts ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Present local port forwards to remote host"
        },
        {
            "trigger": "GlobalKnownHostsFile",
            "contents": "GlobalKnownHostsFile",
            "kind": "keyword",
            "details": "File(s) with global host keys"
        },
        {
            "trigger": "globalknownhostsfile",
            "contents": "GlobalKnownHostsFile ${0:/etc/ssh/ssh_known_hosts}",
            "kind": "snippet",
            "details": "File(s) with global host keys"
        },
        {
            "trigger": "GSSAPIAuthentication",
            "contents": "GSSAPIAuthentication",
            "kind": "keyword",
            "details": "Enable auth with GSSAPI"
        },
        {
            "trigger": "gssapiauthentication",
            "contents": "GSSAPIAuthentication ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Enable auth with GSSAPI"
        },
        {
            "trigger": "GSSAPIClientIdentity",
            "contents": "GSSAPIClientIdentity",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "GSSAPIDelegateCredentials",
            "contents": "GSSAPIDelegateCredentials",
            "kind": "keyword",
            "details": "Forward credentials to the server"
        },
        {
            "trigger": "gssapidelegatecredentials",
            "contents": "GSSAPIDelegateCredentials ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Forward credentials to the server"
        },
        {
            "trigger": "GSSAPIKeyExchange",
            "contents": "GSSAPIKeyExchange",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "GSSAPIRenewalForcesRekey",
            "contents": "GSSAPIRenewalForcesRekey",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "gssapirenewalforcesrekey",
            "contents": "GSSAPIRenewalForcesRekey ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": ""
        },
        {
            "trigger": "GSSAPITrustDns",
            "contents": "GSSAPITrustDns",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "gssapitrustdns",
            "contents": "GSSAPITrustDns ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": ""
        },
        {
            "trigger": "HashKnownHosts",
            "contents": "HashKnownHosts",
            "kind": "keyword",
            "details": "Obfuscate entry in <code>known_hosts</code>"
        },
        {
            "trigger": "hashknownhosts",
            "contents": "HashKnownHosts ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Obfuscate entry in <code>known_hosts</code>"
        },
        {
            "trigger": "HostbasedAuthentication",
            "contents": "HostbasedAuthentication",
            "kind": "keyword",
            "details": "Enable rhosts auth with public keys"
        },
        {
            "trigger": "hostbasedauthentication",
            "contents": "HostbasedAuthentication ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Enable rhosts auth with public keys"
        },
        {
            "trigger": "HostbasedKeyTypes",
            "contents": "HostbasedKeyTypes",
            "kind": "keyword",
            "details": "Permitted key type patterns, by preference"
        },
        {
            "trigger": "hostbasedkeytypes",
            "contents": "HostbasedKeyTypes ${0:{ ^prepend,to,list | +append,to,list | -remove,from,list | replace,list \\}}",
            "kind": "snippet",
            "details": "Permitted key type patterns, by preference"
        },
        {
            "trigger": "HostKeyAlgorithms",
            "contents": "HostKeyAlgorithms",
            "kind": "keyword",
            "details": "Permitted key algm patterns, by preference"
        },
        {
            "trigger": "hostkeyalgorithms",
            "contents": "HostKeyAlgorithms ${0:{ ^prepend,to,list | +append,to,list | -remove,from,list | replace,list \\}}",
            "kind": "snippet",
            "details": "Permitted key algm patterns, by preference"
        },
        {
            "trigger": "HostKeyAlias",
            "contents": "HostKeyAlias",
            "kind": "keyword",
            "details": "Use an alias for this host's certs"
        },
        {
            "trigger": "hostkeyalias",
            "contents": "HostKeyAlias ${0:hostname}",
            "kind": "snippet",
            "details": "Use an alias for this host's certs"
        },
        {
            "trigger": "HostName",
            "contents": "HostName",
            "kind": "keyword",
            "details": "Set real hostname"
        },
        {
            "trigger": "hostname",
            "contents": "HostName ${0:%h.example.com}",
            "kind": "snippet",
            "details": "Set real hostname"
        },
        {
            "trigger": "IdentitiesOnly",
            "contents": "IdentitiesOnly",
            "kind": "keyword",
            "details": "Suppress keys from ~/.ssh"
        },
        {
            "trigger": "identitiesonly",
            "contents": "IdentitiesOnly ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Suppress keys from ~/.ssh"
        },
        {
            "trigger": "IdentityAgent",
            "contents": "IdentityAgent",
            "kind": "keyword",
            "details": "Socket to communicate with auth agent"
        },
        {
            "trigger": "identityagent",
            "contents": "IdentityAgent ${0:{ SSH_AUTH_SOCK | ~/.ssh/socket/path | \\$PATH_VAR | none \\}}",
            "kind": "snippet",
            "details": "Socket to communicate with auth agent"
        },
        {
            "trigger": "IdentityFile",
            "contents": "IdentityFile",
            "kind": "keyword",
            "details": "Path to key file; Multiple allowed"
        },
        {
            "trigger": "identityfile",
            "contents": "IdentityFile ${0:~/.ssh/id_rsa_%h}",
            "kind": "snippet",
            "details": "Path to key file; Multiple allowed"
        },
        {
            "trigger": "IgnoreUnknown",
            "contents": "IgnoreUnknown",
            "kind": "keyword",
            "details": "Pattern for config options to ignore"
        },
        {
            "trigger": "ignoreunknown",
            "contents": "IgnoreUnknown ${0:FooBar*}",
            "kind": "snippet",
            "details": "Pattern for config options to ignore"
        },
        {
            "trigger": "Include",
            "contents": "Include",
            "kind": "keyword",
            "details": "Configuration files to inject"
        },
        {
            "trigger": "include",
            "contents": "Include ${0:~/.ssh/config_*_cloud}",
            "kind": "snippet",
            "details": "Configuration files to inject"
        },
        {
            "trigger": "IPQoS",
            "contents": "IPQoS",
            "kind": "keyword",
            "details": "IPv4 type-of-service or DSCP class for connections"
        },
        {
            "trigger": "ipqos",
            "contents": "IPQoS ${0:{ af11 | af12 | ... | lowdelay | throughput | reliability \\}}",
            "kind": "snippet",
            "details": "IPv4 type-of-service or DSCP class for connections"
        },
        {
            "trigger": "KbdInteractiveAuthentication",
            "contents": "KbdInteractiveAuthentication",
            "kind": "keyword",
            "details": "Disable interactive login on the CLI"
        },
        {
            "trigger": "kbdinteractiveauthentication",
            "contents": "KbdInteractiveAuthentication ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Disable interactive login on the CLI"
        },
        {
            "trigger": "KbdInteractiveDevices",
            "contents": "KbdInteractiveDevices",
            "kind": "keyword",
            "details": "Methods to use in keyboard-interactive auth"
        },
        {
            "trigger": "kbdinteractivedevices",
            "contents": "KbdInteractiveDevices ${0:bsdauth,pam,skey}",
            "kind": "snippet",
            "details": "Methods to use in keyboard-interactive auth"
        },
        {
            "trigger": "KexAlgorithms",
            "contents": "KexAlgorithms",
            "kind": "keyword",
            "details": "Permitted key exchange algm patterns, by preference"
        },
        {
            "trigger": "kexalgorithms",
            "contents": "KexAlgorithms ${0:{ ^prepend,to,list | +append,to,list | -remove,from,list | replace,list \\}}",
            "kind": "snippet",
            "details": "Permitted key exchange algm patterns, by preference"
        },
        {
            "trigger": "LocalCommand",
            "contents": "LocalCommand",
            "kind": "keyword",
            "details": "Execute command locally when connection successful"
        },
        {
            "trigger": "localcommand",
            "contents": "LocalCommand ${0:echo \"tada! %C, %d, %h, %i, %l, %n, %p, %r, %T, %u\"}",
            "kind": "snippet",
            "details": "Execute command locally when connection successful"
        },
        {
            "trigger": "LocalForward",
            "contents": "LocalForward",
            "kind": "keyword",
            "details": "Forward local port over <code>ssh</code> to third party"
        },
        {
            "trigger": "localforward",
            "contents": "LocalForward ${1:[bind_address:]port} ${2:host}:${3:hostport}",
            "kind": "snippet",
            "details": "Forward local port over <code>ssh</code> to third party"
        },
        {
            "trigger": "LogLevel",
            "contents": "LogLevel",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "loglevel",
            "contents": "LogLevel ${0:{ QUIET | FATAL | ERROR | INFO | ... \\}}",
            "kind": "snippet",
            "details": ""
        },
        {
            "trigger": "MACs",
            "contents": "MACs",
            "kind": "keyword",
            "details": "Permitted message auth code algm patterns, by preference"
        },
        {
            "trigger": "macs",
            "contents": "MACs ${0:{ ^prepend,to,list | +append,to,list | -remove,from,list | replace,list \\}}",
            "kind": "snippet",
            "details": "Permitted message auth code algm patterns, by preference"
        },
        {
            "trigger": "NoHostAuthenticationForLocalhost",
            "contents": "NoHostAuthenticationForLocalhost",
            "kind": "keyword",
            "details": "Let <code>localhost</code> pretend to be anyone it wants"
        },
        {
            "trigger": "nohostauthenticationforlocalhost",
            "contents": "NoHostAuthenticationForLocalhost ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Let <code>localhost</code> pretend to be anyone it wants"
        },
        {
            "trigger": "NumberOfPasswordPrompts",
            "contents": "NumberOfPasswordPrompts",
            "kind": "keyword",
            "details": "Number of password attempts before deny"
        },
        {
            "trigger": "numberofpasswordprompts",
            "contents": "NumberOfPasswordPrompts ${0:1}",
            "kind": "snippet",
            "details": "Number of password attempts before deny"
        },
        {
            "trigger": "PasswordAuthentication",
            "contents": "PasswordAuthentication",
            "kind": "keyword",
            "details": "Disable CLI password entry"
        },
        {
            "trigger": "passwordauthentication",
            "contents": "PasswordAuthentication ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Disable CLI password entry"
        },
        {
            "trigger": "PermitLocalCommand",
            "contents": "PermitLocalCommand",
            "kind": "keyword",
            "details": "Enable <code>LocalCommand</code> execution"
        },
        {
            "trigger": "permitlocalcommand",
            "contents": "PermitLocalCommand ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Enable <code>LocalCommand</code> execution"
        },
        {
            "trigger": "PKCS11Provider",
            "contents": "PKCS11Provider",
            "kind": "keyword",
            "details": "Specify a PKCS#11 provider"
        },
        {
            "trigger": "Port",
            "contents": "Port",
            "kind": "keyword",
            "details": "Connect on this port"
        },
        {
            "trigger": "port",
            "contents": "Port ${0:22}",
            "kind": "snippet",
            "details": "Connect on this port"
        },
        {
            "trigger": "PreferredAuthentications",
            "contents": "PreferredAuthentications",
            "kind": "keyword",
            "details": "Auth methods, by preference"
        },
        {
            "trigger": "preferredauthentications",
            "contents": "PreferredAuthentications ${0:gssapi-with-mic,hostbased,publickey,keyboard-interactive,password}",
            "kind": "snippet",
            "details": "Auth methods, by preference"
        },
        {
            "trigger": "Protocol",
            "contents": "Protocol",
            "kind": "keyword",
            "details": "<em>Deprecated</em> Protocol is 2"
        },
        {
            "trigger": "protocol",
            "contents": "Protocol ${0:2}",
            "kind": "snippet",
            "details": "<em>Deprecated</em> Protocol is 2"
        },
        {
            "trigger": "ProxyCommand",
            "contents": "ProxyCommand",
            "kind": "keyword",
            "details": "Run command to establish proxy"
        },
        {
            "trigger": "proxycommand",
            "contents": "ProxyCommand ${0:/usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p}",
            "kind": "snippet",
            "details": "Run command to establish proxy"
        },
        {
            "trigger": "ProxyJump",
            "contents": "ProxyJump",
            "kind": "keyword",
            "details": "Use <code>ssh</code> on <code>host</code> as proxy"
        },
        {
            "trigger": "proxyjump",
            "contents": "ProxyJump ${0:[user@]host[:port]}",
            "kind": "snippet",
            "details": "Use <code>ssh</code> on <code>host</code> as proxy"
        },
        {
            "trigger": "ProxyUseFdpass",
            "contents": "ProxyUseFdpass",
            "kind": "keyword",
            "details": "Pass a connected <code>fd</code> instead of continuing interactively"
        },
        {
            "trigger": "proxyusefdpass",
            "contents": "ProxyUseFdpass ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Pass a connected <code>fd</code> instead of continuing interactively"
        },
        {
            "trigger": "PubkeyAcceptedKeyTypes",
            "contents": "PubkeyAcceptedKeyTypes",
            "kind": "keyword",
            "details": "Permitted key type patterns, by preference"
        },
        {
            "trigger": "pubkeyacceptedkeytypes",
            "contents": "PubkeyAcceptedKeyTypes ${0:{ ^prepend,to,list | +append,to,list | -remove,from,list | replace,list \\}}",
            "kind": "snippet",
            "details": "Permitted key type patterns, by preference"
        },
        {
            "trigger": "PubkeyAuthentication",
            "contents": "PubkeyAuthentication",
            "kind": "keyword",
            "details": "Disable asymmetric key authentication"
        },
        {
            "trigger": "pubkeyauthentication",
            "contents": "PubkeyAuthentication ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Disable asymmetric key authentication"
        },
        {
            "trigger": "RekeyLimit",
            "contents": "RekeyLimit",
            "kind": "keyword",
            "details": "Data-length and duration before rekey"
        },
        {
            "trigger": "rekeylimit",
            "contents": "RekeyLimit ${0:2G 3h}",
            "kind": "snippet",
            "details": "Data-length and duration before rekey"
        },
        {
            "trigger": "RemoteCommand",
            "contents": "RemoteCommand",
            "kind": "keyword",
            "details": "Run command on server after connecting"
        },
        {
            "trigger": "remotecommand",
            "contents": "RemoteCommand ${0:echo \"tada! %C, %d, %h, %i, %l, %n, %p, %r, %u\"}",
            "kind": "snippet",
            "details": "Run command on server after connecting"
        },
        {
            "trigger": "RemoteForward",
            "contents": "RemoteForward",
            "kind": "keyword",
            "details": "Forward ports (<code>-R</code>) from server to client"
        },
        {
            "trigger": "remoteforward",
            "contents": "RemoteForward ${1:[bind_address:]port}${2: [host:hostport]}",
            "kind": "snippet",
            "details": "Forward ports (<code>-R</code>) from server to client"
        },
        {
            "trigger": "RequestTTY",
            "contents": "RequestTTY",
            "kind": "keyword",
            "details": "Toggle asking for a <code>pty</code>"
        },
        {
            "trigger": "requesttty",
            "contents": "RequestTTY ${0:{ yes | no | force | auto \\}}",
            "kind": "snippet",
            "details": "Toggle asking for a <code>pty</code>"
        },
        {
            "trigger": "RevokedHostKeys",
            "contents": "RevokedHostKeys",
            "kind": "keyword",
            "details": "File of KRL or list of bad public keys"
        },
        {
            "trigger": "RhostsRSAAuthentication",
            "contents": "RhostsRSAAuthentication",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "RSAAuthentication",
            "contents": "RSAAuthentication",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "rsaauthentication",
            "contents": "RSAAuthentication ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": ""
        },
        {
            "trigger": "SecurityKeyProvider",
            "contents": "SecurityKeyProvider",
            "kind": "keyword",
            "details": "Path to alternative library for FIDO keys"
        },
        {
            "trigger": "SendEnv",
            "contents": "SendEnv",
            "kind": "keyword",
            "details": "Patterns for environment vars to send to remote"
        },
        {
            "trigger": "ServerAliveCountMax",
            "contents": "ServerAliveCountMax",
            "kind": "keyword",
            "details": "Number of check-alive messages to send before giving up"
        },
        {
            "trigger": "serveralivecountmax",
            "contents": "ServerAliveCountMax ${0:3}",
            "kind": "snippet",
            "details": "Number of check-alive messages to send before giving up"
        },
        {
            "trigger": "ServerAliveInterval",
            "contents": "ServerAliveInterval",
            "kind": "keyword",
            "details": "Timeout in seconds before sending check-alive messages"
        },
        {
            "trigger": "serveraliveinterval",
            "contents": "ServerAliveInterval ${0:300}",
            "kind": "snippet",
            "details": "Timeout in seconds before sending check-alive messages"
        },
        {
            "trigger": "SetEnv",
            "contents": "SetEnv",
            "kind": "keyword",
            "details": "Specify environment vars directly"
        },
        {
            "trigger": "setenv",
            "contents": "SetEnv ${1:NAME}=${2:value}",
            "kind": "snippet",
            "details": "Specify environment vars directly"
        },
        {
            "trigger": "SmartcardDevice",
            "contents": "SmartcardDevice",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "StreamLocalBindMask",
            "contents": "StreamLocalBindMask",
            "kind": "keyword",
            "details": "File mode <code>umask</code> when creating a forwarded port"
        },
        {
            "trigger": "streamlocalbindmask",
            "contents": "StreamLocalBindMask ${0:0177}",
            "kind": "snippet",
            "details": "File mode <code>umask</code> when creating a forwarded port"
        },
        {
            "trigger": "StreamLocalBindUnlink",
            "contents": "StreamLocalBindUnlink",
            "kind": "keyword",
            "details": "Enable overwriting existing ports with forwarding"
        },
        {
            "trigger": "streamlocalbindunlink",
            "contents": "StreamLocalBindUnlink ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Enable overwriting existing ports with forwarding"
        },
        {
            "trigger": "StrictHostKeyChecking",
            "contents": "StrictHostKeyChecking",
            "kind": "keyword",
            "details": "Set behavior for new and unmatched <code>known_hosts</code> entries"
        },
        {
            "trigger": "stricthostkeychecking",
            "contents": "StrictHostKeyChecking ${0:{ yes | no | ask | accept-new | off \\}}",
            "kind": "snippet",
            "details": "Set behavior for new and unmatched <code>known_hosts</code> entries"
        },
        {
            "trigger": "SyslogFacility",
            "contents": "SyslogFacility",
            "kind": "keyword",
            "details": "Facility code used when logging <code>ssh</code> messages"
        },
        {
            "trigger": "syslogfacility",
            "contents": "SyslogFacility ${0:{ DAEMON | USER | AUTH | LOCAL0 | ... \\}}",
            "kind": "snippet",
            "details": "Facility code used when logging <code>ssh</code> messages"
        },
        {
            "trigger": "TCPKeepAlive",
            "contents": "TCPKeepAlive",
            "kind": "keyword",
            "details": "Disable TCP keepalive messages"
        },
        {
            "trigger": "tcpkeepalive",
            "contents": "TCPKeepAlive ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Disable TCP keepalive messages"
        },
        {
            "trigger": "Tunnel",
            "contents": "Tunnel",
            "kind": "keyword",
            "details": "Request <code>tun</code> device forwarding"
        },
        {
            "trigger": "tunnel",
            "contents": "Tunnel ${0:{ yes | no | ethernet | point-to-point \\}}",
            "kind": "snippet",
            "details": "Request <code>tun</code> device forwarding"
        },
        {
            "trigger": "TunnelDevice",
            "contents": "TunnelDevice",
            "kind": "keyword",
            "details": "Specify <code>tun</code> devices to open on client and server"
        },
        {
            "trigger": "tunneldevice",
            "contents": "TunnelDevice ${0:local_tun[:remote_tun]}",
            "kind": "snippet",
            "details": "Specify <code>tun</code> devices to open on client and server"
        },
        {
            "trigger": "UpdateHostKeys",
            "contents": "UpdateHostKeys",
            "kind": "keyword",
            "details": "Update <code>known_hosts</code> after auth"
        },
        {
            "trigger": "updatehostkeys",
            "contents": "UpdateHostKeys ${0:{ yes | no | ask \\}}",
            "kind": "snippet",
            "details": "Update <code>known_hosts</code> after auth"
        },
        {
            "trigger": "UseKeychain",
            "contents": "UseKeychain",
            "kind": "keyword",
            "details": "Use macOS keychain to manage passphrases"
        },
        {
            "trigger": "UsePrivilegePort",
            "contents": "UsePrivilegePort",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "User",
            "contents": "User",
            "kind": "keyword",
            "details": "Set user to log in as"
        },
        {
            "trigger": "user",
            "contents": "User ${0:username}",
            "kind": "snippet",
            "details": "Set user to log in as"
        },
        {
            "trigger": "UserKnownHostsFile",
            "contents": "UserKnownHostsFile",
            "kind": "keyword",
            "details": "Path to <code>known_hosts</code> file(s)"
        },
        {
            "trigger": "userknownhostsfile",
            "contents": "UserKnownHostsFile ${0:~/.ssh/known_hosts}",
            "kind": "snippet",
            "details": "Path to <code>known_hosts</code> file(s)"
        },
        {
            "trigger": "VerifyHostKeyDNS",
            "contents": "VerifyHostKeyDNS",
            "kind": "keyword",
            "details": ""
        },
        {
            "trigger": "verifyhostkeydns",
            "contents": "VerifyHostKeyDNS ${0:{ yes | no | ask \\}}",
            "kind": "snippet",
            "details": ""
        },
        {
            "trigger": "VisualHostKey",
            "contents": "VisualHostKey",
            "kind": "keyword",
            "details": "Show ASCII art for host's key"
        },
        {
            "trigger": "visualhostkey",
            "contents": "VisualHostKey ${0:{ yes | no \\}}",
            "kind": "snippet",
            "details": "Show ASCII art for host's key"
        },
        {
            "trigger": "XAuthLocation",
            "contents": "XAuthLocation",
            "kind": "keyword",
            "details": "Full pathname of the <code>xauth</code> program"
        },
        {
            "trigger": "xauthlocation",
            "contents": "XAuthLocation ${0:/usr/X11R6/bin/xauth}",
            "kind": "snippet",
            "details": "Full pathname of the <code>xauth</code> program"
        }
    ]
}